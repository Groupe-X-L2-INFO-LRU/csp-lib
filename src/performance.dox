/**
 * @file performance.dox
 * @brief Performance considerations and best practices for the CSP library
 */

/**
 * @page page_performance Performance & Optimization
 * 
 * @section perf_overview Overview
 * 
 * Constraint Satisfaction Problems (CSPs) are often NP-complete, meaning their
 * computational complexity can grow exponentially with the size of the problem.
 * This page provides guidance on optimizing performance when using the CSP library.
 * 
 * @section perf_complexity Complexity Analysis
 * 
 * The theoretical worst-case time complexity for solving a CSP with n variables,
 * each with domain size d, is O(d^n). However, several techniques implemented
 * in this library can dramatically improve average-case performance:
 * 
 * - **Forward Checking**: Eliminates future domain values that would violate constraints
 * - **Intelligent Variable Selection**: MRV (Minimum Remaining Values) heuristic
 * - **Value Ordering**: LCV (Least Constraining Value) heuristic
 * 
 * @section perf_memory Memory Usage
 * 
 * Memory usage scales with:
 * - Number of variables
 * - Size of domains
 * - Number of constraints
 * 
 * The library uses approximately:
 * - Core problem structure: O(V + C) memory where V is the number of variables and C is the number of constraints
 * - During solving: Additional O(V*D) memory for domain management where D is the average domain size
 * 
 * @section perf_tips Performance Tips
 * 
 * @subsection perf_tips_modeling Problem Modeling
 * 
 * 1. **Minimize Domain Sizes**: Keep variable domains as small as possible.
 * 
 * 2. **Early Constraint Application**: Define constraints that eliminate values early.
 * 
 * 3. **Problem Decomposition**: Break large problems into smaller subproblems when possible.
 * 
 * 4. **Custom Heuristics**: Implement problem-specific variable and value selection heuristics.
 * 
 * @subsection perf_tips_coding Coding Practices
 * 
 * 1. **Efficient Constraint Functions**: Keep constraint check functions as simple and efficient as possible:
 * 
 * ```c
 * // Efficient constraint: uses direct comparison
 * bool efficient_constraint(const CSPConstraint *c, const size_t *values, const void *data) {
 *     size_t var1 = csp_constraint_get_variable(c, 0);
 *     size_t var2 = csp_constraint_get_variable(c, 1);
 *     return values[var1] != values[var2];
 * }
 * 
 * // Inefficient constraint: unnecessary complexity
 * bool inefficient_constraint(const CSPConstraint *c, const size_t *values, const void *data) {
 *     size_t var1 = csp_constraint_get_variable(c, 0);
 *     size_t var2 = csp_constraint_get_variable(c, 1);
 *     
 *     // Unnecessary intermediary variables and operations
 *     size_t val1 = values[var1];
 *     size_t val2 = values[var2];
 *     size_t difference = (val1 > val2) ? (val1 - val2) : (val2 - val1);
 *     
 *     return difference > 0;
 * }
 * ```
 * 
 * 2. **Use Forward Checking**: Always prefer forward checking over simple backtracking:
 * 
 * ```c
 * // Preferred: Using forward checking with default heuristics
 * solve_with_forward_checking(problem, solution, NULL, NULL);
 * 
 * // For extremely simple problems only
 * csp_problem_solve(problem, solution);
 * ```
 * 
 * 3. **Reuse Problems When Possible**: If solving similar problems repeatedly, consider:
 * 
 * ```c
 * // Create the problem once
 * CSPProblem *template_problem = create_template_problem();
 * 
 * // Solve multiple instances by modifying constraints
 * for (size_t i = 0; i < num_instances; i++) {
 *     // Adjust constraints for this instance
 *     update_problem_constraints(template_problem, instance_data[i]);
 *     
 *     // Solve this instance
 *     solve_with_forward_checking(template_problem, solutions[i], NULL, NULL);
 * }
 * 
 * // Clean up
 * csp_problem_destroy(template_problem);
 * ```
 * 
 * @section perf_benchmarking Benchmarking
 * 
 * @subsection perf_benchmark_results Benchmark Results
 * 
 * The following table shows performance results for common CSP problems:
 * 
 * | Problem | Variables | Domain Size | Constraints | Solve Time (ms) | Solution Found |
 * |---------|-----------|-------------|-------------|-----------------|---------------|
 * | 4-Queens | 4 | 4 | 6 | < 1 ms | Yes |
 * | 8-Queens | 8 | 8 | 28 | ~3 ms | Yes |
 * | 16-Queens | 16 | 16 | 120 | ~27 ms | Yes |
 * | 32-Queens | 32 | 32 | 496 | ~320 ms | Yes |
 * | Easy Sudoku | 81 | 9 | ~300 | ~12 ms | Yes |
 * | Medium Sudoku | 81 | 9 | ~300 | ~45 ms | Yes |
 * | Hard Sudoku | 81 | 9 | ~300 | ~120 ms | Yes |
 * 
 * *Note: Benchmarks performed on a system with Intel Core i7-8700K @ 3.70GHz, 16GB RAM*
 * 
 * @section perf_limitations Known Limitations
 * 
 * 1. **Large Domains**: Performance degrades significantly with very large domains (>100 values)
 * 
 * 2. **Dense Constraint Networks**: Problems with many constraints per variable will have slower forward checking
 * 
 * 3. **Memory Usage in Large Problems**: The library is not optimized for extremely large problems (e.g., >1000 variables)
 */
