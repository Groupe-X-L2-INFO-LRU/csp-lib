/**
 * @file examples.dox
 * @brief Examples and tutorials for using the CSP library
 */

/**
 * @page page_examples Code Examples
 * 
 * @section example_overview Overview
 * 
 * This page contains complete practical examples showing how to use the CSP library
 * for various problems. Each example includes:
 * 
 * - Problem description
 * - How to model it as a CSP
 * - Complete code solution
 * - Explanation of key concepts
 * 
 * @section example_map_coloring Map Coloring Problem
 * 
 * The map coloring problem involves assigning colors to regions of a map
 * such that no adjacent regions share the same color.
 * 
 * @subsection map_coloring_model CSP Modeling
 * 
 * - Variables: Regions of the map
 * - Domain: Available colors (typically 3 or 4 colors)
 * - Constraints: Adjacent regions must have different colors
 * 
 * @subsection map_coloring_code Complete Code Example
 * 
 * ```c
 * #include "csp.h"
 * #include "forward-checking.h"
 * #include <stdio.h>
 * #include <stdlib.h>
 * 
 * // Define our custom constraint checker function
 * bool different_colors(const CSPConstraint *constraint, const size_t *values, const void *data) {
 *     // Get the variables (regions) involved in this constraint
 *     size_t region1 = csp_constraint_get_variable(constraint, 0);
 *     size_t region2 = csp_constraint_get_variable(constraint, 1);
 *     
 *     // Return true if the regions have different colors, false otherwise
 *     return values[region1] != values[region2];
 * }
 * 
 * int main() {
 *     // Initialize the CSP library
 *     csp_init();
 *     
 *     // Define a simple map with 4 regions: A, B, C, D
 *     const size_t num_regions = 4;
 *     
 *     // Each region can be colored with one of 3 colors (0=Red, 1=Green, 2=Blue)
 *     const size_t num_colors = 3;
 *     size_t domains[4] = {num_colors, num_colors, num_colors, num_colors};
 *     
 *     // Create the CSP problem
 *     CSPProblem *problem = csp_problem_create(num_regions, domains);
 *     
 *     // Define adjacencies between regions: A-B, A-C, B-C, B-D, C-D
 *     size_t adjacencies[][2] = {
 *         {0, 1}, // A-B
 *         {0, 2}, // A-C
 *         {1, 2}, // B-C
 *         {1, 3}, // B-D
 *         {2, 3}  // C-D
 *     };
 *     
 *     // Create constraints for each adjacency
 *     for (size_t i = 0; i < 5; i++) {
 *         CSPConstraint *c = csp_constraint_create(2, different_colors);
 *         csp_constraint_set_variable(c, 0, adjacencies[i][0]);
 *         csp_constraint_set_variable(c, 1, adjacencies[i][1]);
 *         csp_problem_add_constraint(problem, c);
 *     }
 *     
 *     // Solve the problem using forward checking
 *     size_t solution[num_regions];
 *     bool solved = solve_with_forward_checking(problem, solution, NULL, NULL);
 *     
 *     // Display the results
 *     if (solved) {
 *         const char *color_names[] = {"Red", "Green", "Blue"};
 *         const char *region_names[] = {"A", "B", "C", "D"};
 *         
 *         printf("Map coloring solution found:\n");
 *         for (size_t i = 0; i < num_regions; i++) {
 *             printf("Region %s: %s\n", region_names[i], color_names[solution[i]]);
 *         }
 *     } else {
 *         printf("No solution found for the map coloring problem.\n");
 *     }
 *     
 *     // Clean up resources
 *     csp_problem_destroy(problem);
 *     csp_finish();
 *     
 *     return 0;
 * }
 * ```
 * 
 * @section example_scheduling Simple Scheduling Problem
 * 
 * This example demonstrates how to model and solve a simple scheduling problem 
 * where tasks must be assigned to time slots with various constraints.
 * 
 * @subsection scheduling_model CSP Modeling
 * 
 * - Variables: Tasks to be scheduled
 * - Domain: Available time slots
 * - Constraints: 
 *   - Some tasks must be completed before others
 *   - Some tasks cannot run simultaneously
 *   - Some tasks have fixed time slots
 * 
 * @subsection scheduling_code Complete Code Example
 * 
 * ```c
 * #include "csp.h"
 * #include "forward-checking.h"
 * #include <stdio.h>
 * #include <stdbool.h>
 * 
 * // Task precedence constraint: task1 must be scheduled before task2
 * bool task_precedence(const CSPConstraint *constraint, const size_t *values, const void *data) {
 *     size_t task1 = csp_constraint_get_variable(constraint, 0);
 *     size_t task2 = csp_constraint_get_variable(constraint, 1);
 *     
 *     // The time slot for task1 must be less than the time slot for task2
 *     return values[task1] < values[task2];
 * }
 * 
 * // Task separation constraint: tasks cannot be scheduled in the same time slot
 * bool task_separation(const CSPConstraint *constraint, const size_t *values, const void *data) {
 *     size_t task1 = csp_constraint_get_variable(constraint, 0);
 *     size_t task2 = csp_constraint_get_variable(constraint, 1);
 *     
 *     // The time slots must be different
 *     return values[task1] != values[task2];
 * }
 * 
 * // Fixed time constraint: task must be scheduled at exactly the specified time
 * bool fixed_time(const CSPConstraint *constraint, const size_t *values, const void *data) {
 *     size_t task = csp_constraint_get_variable(constraint, 0);
 *     size_t required_time = *(const size_t *)data;
 *     
 *     return values[task] == required_time;
 * }
 * 
 * int main() {
 *     // Initialize the CSP library
 *     csp_init();
 *     
 *     // Define 5 tasks to be scheduled in 8 time slots (0-7)
 *     const size_t num_tasks = 5;
 *     const size_t num_time_slots = 8;
 *     size_t domains[5] = {num_time_slots, num_time_slots, num_time_slots, num_time_slots, num_time_slots};
 *     
 *     // Create the CSP problem
 *     CSPProblem *problem = csp_problem_create(num_tasks, domains);
 *     
 *     // Task 0 must be performed before Task 1
 *     CSPConstraint *c1 = csp_constraint_create(2, task_precedence);
 *     csp_constraint_set_variable(c1, 0, 0);
 *     csp_constraint_set_variable(c1, 1, 1);
 *     csp_problem_add_constraint(problem, c1);
 *     
 *     // Task 1 must be performed before Task 2
 *     CSPConstraint *c2 = csp_constraint_create(2, task_precedence);
 *     csp_constraint_set_variable(c2, 0, 1);
 *     csp_constraint_set_variable(c2, 1, 2);
 *     csp_problem_add_constraint(problem, c2);
 *     
 *     // Tasks 3 and 4 cannot be scheduled at the same time
 *     CSPConstraint *c3 = csp_constraint_create(2, task_separation);
 *     csp_constraint_set_variable(c3, 0, 3);
 *     csp_constraint_set_variable(c3, 1, 4);
 *     csp_problem_add_constraint(problem, c3);
 *     
 *     // Task 4 must be performed at time slot 5
 *     size_t fixed_slot = 5;
 *     CSPConstraint *c4 = csp_constraint_create(1, fixed_time);
 *     csp_constraint_set_variable(c4, 0, 4);
 *     csp_constraint_set_data(c4, &fixed_slot);
 *     csp_problem_add_constraint(problem, c4);
 *     
 *     // Solve the problem using forward checking
 *     size_t solution[num_tasks];
 *     bool solved = solve_with_forward_checking(problem, solution, NULL, NULL);
 *     
 *     // Display the results
 *     if (solved) {
 *         printf("Scheduling solution found:\n");
 *         for (size_t i = 0; i < num_tasks; i++) {
 *             printf("Task %zu scheduled at time slot %zu\n", i, solution[i]);
 *         }
 *     } else {
 *         printf("No scheduling solution found.\n");
 *     }
 *     
 *     // Clean up resources
 *     csp_problem_destroy(problem);
 *     csp_finish();
 *     
 *     return 0;
 * }
 * ```
 */
