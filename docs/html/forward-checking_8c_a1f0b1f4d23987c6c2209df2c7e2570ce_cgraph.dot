digraph "backtrack_fc"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Roboto,fontsize=10,labelfontname=Roboto,labelfontsize=10];
  node [fontname=Roboto,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="backtrack_fc",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node1 [id="edge1_Node000001_Node000001",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node2 [id="edge2_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="csp_initialised",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$csp_8c.html#aca1712012517bff1090a471f502cf729",tooltip="Checks if the CSP library is initialized."];
  Node1 -> Node3 [id="edge3_Node000001_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="fc_is_consistent",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$forward-checking_8c.html#a400289d0fceaceb244ed1e32f4860880",tooltip="Checks consistency of the current assignment under forward checking."];
  Node3 -> Node4 [id="edge4_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="csp_constraint_get\l_arity",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$csp_8c.html#a0ec9ba5a3f78127657d0ab0f2d3a5bbd",tooltip="Gets the arity of a constraint."];
  Node4 -> Node2 [id="edge5_Node000004_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node5 [id="edge6_Node000003_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="csp_constraint_get\l_check",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$csp_8c.html#ac9b8e8925b0302c3cdd35b0186a1acd8",tooltip="Gets the check function associated with a constraint."];
  Node5 -> Node2 [id="edge7_Node000005_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node6 [id="edge8_Node000003_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="csp_constraint_get\l_variable",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$csp_8c.html#a4cfb5884d7fe282dbecebefb53bb9cdd",tooltip="Gets the variable ID associated with a specific position in the constraint."];
  Node6 -> Node2 [id="edge9_Node000006_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node7 [id="edge10_Node000003_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="csp_problem_get_constraint",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$csp_8c.html#aba7697a379d5f761429bb911e2bc2bbc",tooltip="Gets the constraint at the specified position in the CSP problem."];
  Node7 -> Node2 [id="edge11_Node000007_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node8 [id="edge12_Node000003_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="csp_problem_get_num\l_constraints",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$csp_8c.html#a1dc56cea8c87ec1ef2e4489536cd1f0e",tooltip="Gets the number of constraints in the CSP problem."];
  Node8 -> Node2 [id="edge13_Node000008_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node9 [id="edge14_Node000001_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="order_values_lcv",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$heuristics_8c.html#a9c3a8a6b03e49553f45c6144f97e1fb4",tooltip="Implements the Least Constraining Value (LCV) heuristic for value ordering."];
  Node9 -> Node4 [id="edge15_Node000009_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node9 -> Node6 [id="edge16_Node000009_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node9 -> Node7 [id="edge17_Node000009_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node9 -> Node8 [id="edge18_Node000009_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node10 [id="edge19_Node000001_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="prune_neighbors",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$heuristics_8c.html#a2840f304ec278feae32d3d11915a7a78",tooltip="Prunes inconsistent values from neighboring variables during forward checking."];
  Node10 -> Node4 [id="edge20_Node000010_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node10 -> Node5 [id="edge21_Node000010_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node10 -> Node6 [id="edge22_Node000010_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node10 -> Node7 [id="edge23_Node000010_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node10 -> Node8 [id="edge24_Node000010_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node11 [id="edge25_Node000001_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="restore_pruned",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$heuristics_8c.html#a22131bfb5921b024b7886b33b3fa1c4b",tooltip="Restores values that were pruned during forward checking when backtracking occurs."];
  Node1 -> Node12 [id="edge26_Node000001_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="select_unassigned_var",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$heuristics_8c.html#a934ee1c54ecdfa65b205d3f9888e38de",tooltip="Implements the Minimum Remaining Values (MRV) heuristic for variable selection."];
}
